[{"C:\\Users\\mogam\\Documents\\Projects\\Google Drive Clone\\src\\App.js":"1","C:\\Users\\mogam\\Documents\\Projects\\Google Drive Clone\\src\\components\\sidebar\\NewFile.js":"2","C:\\Users\\mogam\\Documents\\Projects\\Google Drive Clone\\src\\reportWebVitals.js":"3","C:\\Users\\mogam\\Documents\\Projects\\Google Drive Clone\\src\\components\\header\\index.js":"4","C:\\Users\\mogam\\Documents\\Projects\\Google Drive Clone\\src\\components\\filesView\\FileItem.js":"5","C:\\Users\\mogam\\Documents\\Projects\\Google Drive Clone\\src\\components\\sidebar\\index.js":"6","C:\\Users\\mogam\\Documents\\Projects\\Google Drive Clone\\src\\components\\filesView\\FileCard.js":"7"},{"size":1600,"mtime":1641432104000,"results":"8","hashOfConfig":"9"},{"size":3148,"mtime":1641571202082,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1612374884000,"results":"11","hashOfConfig":"9"},{"size":1314,"mtime":1612374884000,"results":"12","hashOfConfig":"9"},{"size":1312,"mtime":1612374884000,"results":"13","hashOfConfig":"9"},{"size":1425,"mtime":1612374884000,"results":"14","hashOfConfig":"9"},{"size":488,"mtime":1612374884000,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"10q0k1n",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"22"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\mogam\\Documents\\Projects\\Google Drive Clone\\src\\App.js",[],"C:\\Users\\mogam\\Documents\\Projects\\Google Drive Clone\\src\\components\\sidebar\\NewFile.js",[],"C:\\Users\\mogam\\Documents\\Projects\\Google Drive Clone\\src\\reportWebVitals.js",[],["33","34"],"C:\\Users\\mogam\\Documents\\Projects\\Google Drive Clone\\src\\components\\header\\index.js",["35","36"],"import React from 'react'\nimport '../../styles/Header.css'\n\nimport GDriveLogo from '../../media/google-drive-logo.png'\n\nimport SearchIcon from '@material-ui/icons/Search';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport HelpOutlineIcon from '@material-ui/icons/HelpOutline';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\nimport AppsIcon from '@material-ui/icons/Apps';\n\nconst index = ({ userPhoto }) => {\n    return (\n        <div className='header'>\n            <div className=\"header__logo\">\n                <img src={GDriveLogo} alt=\"Google Drive\" />\n                <span>Drive</span>\n            </div>\n            <div className=\"header__searchContainer\">\n                <div className=\"header__searchBar\">\n                    <SearchIcon />\n                    <input type=\"text\" placeholder='Search in Drive' />\n                    <ExpandMoreIcon />\n                </div>\n            </div>\n            <div className=\"header__icons\">\n                <span>\n                    <HelpOutlineIcon />\n                    <SettingsIcon />\n                </span>\n                <AppsIcon />\n                <img src={userPhoto} alt=\"User Photo\"/>\n            </div>\n        </div>\n    )\n}\n\nexport default index\n","C:\\Users\\mogam\\Documents\\Projects\\Google Drive Clone\\src\\components\\filesView\\FileItem.js",["37"],"import React from 'react'\nimport '../../styles/FileItem.css'\n\nimport InsertDriveFileIcon from '@material-ui/icons/InsertDriveFile';\n\nconst monthNames = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n\nconst FileItem = ({ id, caption, timestamp, fileUrl, size }) => {\n    const fileDate = `${timestamp?.toDate().getDate()} ${monthNames[timestamp?.toDate().getMonth() + 1]} ${timestamp?.toDate().getFullYear()}`\n\n    const getReadableFileSizeString = (fileSizeInBytes) => {\n        let i = -1;\n        const byteUnits = [' kB', ' MB', ' GB', ' TB', 'PB', 'EB', 'ZB', 'YB'];\n        do {\n            fileSizeInBytes = fileSizeInBytes / 1024;\n            i++;\n        } while (fileSizeInBytes > 1024);\n\n        return Math.max(fileSizeInBytes, 0.1).toFixed(1) + byteUnits[i];\n    };\n\n    return (\n        <div className='fileItem'>\n            <a href={fileUrl} target=\"_blank\" download>\n                <div className=\"fileItem--left\">\n                    <InsertDriveFileIcon />\n                    <p>{caption}</p>\n                </div>\n                <div className=\"fileItem--right\">\n                    <p>{fileDate}</p>\n                    <p>{getReadableFileSizeString(size)}</p>\n                </div>\n            </a>\n        </div>\n    )\n}\n\nexport default FileItem\n","C:\\Users\\mogam\\Documents\\Projects\\Google Drive Clone\\src\\components\\sidebar\\index.js",[],"C:\\Users\\mogam\\Documents\\Projects\\Google Drive Clone\\src\\components\\filesView\\FileCard.js",[],{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","severity":1,"message":"43","line":10,"column":8,"nodeType":"44","messageId":"45","endLine":10,"endColumn":25},{"ruleId":"46","severity":1,"message":"47","line":33,"column":17,"nodeType":"48","endLine":33,"endColumn":56},{"ruleId":"49","severity":1,"message":"50","line":24,"column":31,"nodeType":"51","endLine":24,"endColumn":46},"no-native-reassign",["52"],"no-negated-in-lhs",["53"],"no-unused-vars","'AccountCircleIcon' is defined but never used.","Identifier","unusedVar","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You donâ€™t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","no-global-assign","no-unsafe-negation"]